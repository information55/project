#include <iostream>
#include <vector>
#include <queue>
#include <limits>

using namespace std;

struct Edge {
    int destination;
    int weight;
};
struct Vertex {
    vector<Edge> edges;
    int heuristic;
    int parent; // Parent vertex in the path
};

vector<Vertex> graph;

void addEdge(int source, int destination, int weight) {
    // Resize graph vector if necessary
    int maxIndex = max(source, destination);
    if (maxIndex >= graph.size()) {
        graph.resize(maxIndex + 1);
    }
    Edge newEdge;
    newEdge.destination = destination;
    newEdge.weight = weight;
    graph[source].edges.push_back(newEdge);
}

int astar(int start, int goal) {
    priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> openSet; // pair

    vector<int> totalCost(graph.size(), numeric_limits<int>::max());

    openSet.push({0, start});
    totalCost[start] = 0;

    while (!openSet.empty()) {
        int currentVertex = openSet.top().second;
        openSet.pop();

        if (currentVertex == goal) {
            return totalCost[currentVertex];
        }

        for (const Edge& edge : graph[currentVertex].edges) {
            int newCost = totalCost[currentVertex] + edge.weight;
            if (newCost < totalCost[edge.destination]) {
                totalCost[edge.destination] = newCost;
                int priority = newCost + graph[edge.destination].heuristic;
                openSet.push({priority, edge.destination});
                graph[edge.destination].parent = currentVertex; // Update parent vertex for path
            }
        }
    }

    return -1; // No path found
}

void displayPath(int start, int goal) {
    vector<int> path;
    int currentVertex = goal;

    while (currentVertex != start) {
        path.push_back(currentVertex);
        currentVertex = graph[currentVertex].parent;
    }
    path.push_back(start);

    cout << "Path: ";
    for (int i = path.size() - 1; i >= 0; i--) {
        cout << path[i];
        if (i != 0)
            cout << " -> ";
    }
    cout << endl;
}

int main() {
    int numVertices, numEdges;
    cout << "Enter the number of vertices: ";
    cin >> numVertices;
    graph.resize(numVertices);

    cout << "Enter the number of edges: ";
    cin >> numEdges;

    cout << "Enter the edges with their weights:\n";
    for (int i = 0; i < numEdges; i++) {
        int source, destination, weight;
        cin >> source >> destination >> weight;
        addEdge(source, destination, weight);
    }

    cout << "Enter the heuristic value for each vertex:\n";
    for (int i = 0; i < numVertices; i++) {
        cin >> graph[i].heuristic;
    }
    int start, goal;
    cout << "Enter the start and goal vertices: ";
    cin >> start >> goal;

    int shortestPath = astar(start, goal);

    if (shortestPath != -1) {
        cout << "Shortest path from " << start << " to " << goal << " is: " << shortestPath << endl;
        displayPath(start, goal);
    } else {
        cout << "No path found from " << start << " to " << goal << endl;
    }

    return 0;
}
