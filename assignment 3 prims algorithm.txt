#include <iostream>
#include <vector>
#include <queue>
#include <unordered_map>
#include <climits>

using namespace std;

struct Edge {
    char src, dest;
    int weight;
};

int primMST(const vector<Edge>& edges, char startNode) {
    unordered_map<char, vector<pair<char, int>>> graph;
    for (const auto& edge : edges) {
        graph[edge.src].push_back({edge.dest, edge.weight});
        graph[edge.dest].push_back({edge.src, edge.weight});
    }

    priority_queue<pair<int, char>, vector<pair<int, char>>, greater<pair<int, char>>> pq;

    unordered_map<char, bool> visited;

    int minCost = 0;

    pq.push({0, startNode});

    while (!pq.empty()) {
        char currentVertex = pq.top().second;
        int currentWeight = pq.top().first;
        pq.pop();

        if (!visited[currentVertex]) {
            minCost += currentWeight;

            cout << "Edge: " << startNode << " - " << currentVertex << " Weight: " << currentWeight << endl;

            visited[currentVertex] = true;

            for (const auto& neighbor : graph[currentVertex]) {
                if (!visited[neighbor.first]) {
                    pq.push({neighbor.second, neighbor.first});
                }
            }
        }
    }

    return minCost;
}

int main() {
    int numEdges;
    cout << "Enter the number of edges: ";
    cin >> numEdges;

    vector<Edge> edges(numEdges);
    for (int i = 0; i < numEdges; ++i) {
        cout << "Enter source, destination, and weight of edge " << i + 1 << ": ";
        cin >> edges[i].src >> edges[i].dest >> edges[i].weight;
    }

    char startNode;
    cout << "Enter the starting node: ";
    cin >> startNode;

    cout << "Minimum Spanning Tree using Prim's algorithm (Greedy Approach):" << endl;
    int totalCost = primMST(edges, startNode);
    cout << "Total minimum cost: " << totalCost << endl;

    return 0;
}
